{"version":3,"sources":["components/Icon.tsx","pages/Home/Home.tsx","constants/themes/colors.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["IconLink","IconProvider","link","color","href","target","rel","style","textDecoration","fontSize","Content","Layout","Title","Typography","defaultOptions","loop","autoplay","animationData","earth","rendererSettings","preserveAspectRatio","homeTitle","fontWeight","fontFamily","Footer","className","AiOutlineLinkedin","AiOutlineGithub","FaQuora","Home","useState","animationFinish","setAnimationDone","appLogoClass","display","flex","justifyContent","alignItems","eventListeners","eventName","callback","options","backgroundColor","height","width","marginTop","marginBottom","Header","navStyle","menu","paddingBottomWidth","borderBottomWidth","App","current","setCurrent","padding","onClick","e","key","selectedKeys","mode","Item","to","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.62da426d.chunk.js","sourcesContent":["import React, { ReactElement } from 'react';\n\ntype Props = {\n  IconProvider: ReactElement | any;\n  link: string;\n  color: string;\n};\n\nconst IconLink = ({ IconProvider, link, color }: Props) => (\n  <a\n    href={link}\n    target=\"_blank\"\n    rel=\"noopener noreferrer\"\n    style={{ textDecoration: 'none' }}\n    // style={{ textDecoration: 'none' }}\n  >\n    <IconProvider style={{ fontSize: 40, color }} />\n  </a>\n);\n\nexport { IconLink };\n","/* eslint-disable react/no-unescaped-entities */\nimport React, { useState } from 'react';\nimport '../../App.css';\nimport './home.css';\nimport Lottie from 'react-lottie';\nimport { AiOutlineGithub, AiOutlineLinkedin } from 'react-icons/ai';\nimport { FaQuora } from 'react-icons/fa';\nimport { Layout, Typography } from 'antd';\nimport { colors } from '../../constants/themes/colors';\nimport earth from '../../assets/animations/hello-earth.json';\nimport { IconLink } from '../../components/Icon';\n\nconst { Content } = Layout;\nconst { Title } = Typography;\n\nconst defaultOptions = {\n  loop: false,\n  autoplay: true,\n  animationData: earth,\n  rendererSettings: {\n    preserveAspectRatio: 'xMidYMid slice',\n  },\n};\n\nconst homeTitle = {\n  color: colors.primary,\n  fontWeight: 800,\n  fontSize: 52,\n  fontFamily: 'ArchivoBlack-Regular',\n};\n\nconst Footer = () => (\n  <div className=\"footer\">\n    <IconLink\n      IconProvider={AiOutlineLinkedin}\n      link=\"https://www.linkedin.com/in/john-clifford-de-vera-511150159/\"\n      color=\"#0E76A8\"\n    />\n    <IconLink\n      IconProvider={AiOutlineGithub}\n      link=\"https://www.github.com/jayzyaj/\"\n      color=\"#211F1F\"\n    />\n    <IconLink\n      IconProvider={FaQuora}\n      link=\"https://www.quora.com/profile/Jayz-De-Vera/\"\n      color=\"#A82400\"\n    />\n  </div>\n);\n\nfunction Home() {\n  const [animationFinish, setAnimationDone] = useState<boolean>(false);\n  const handleAnimation = () => setAnimationDone(true);\n\n  let appLogoClass = '';\n  if (animationFinish) appLogoClass = 'App-logo';\n  return (\n    <Content style={{ display: 'flex', flex: 1, justifyContent: 'space-around', alignItems: 'center' }}>\n      <div className=\"App\">\n        <div style={{ display: 'flex', flex: 1 }} className={appLogoClass}>\n          <Lottie\n            eventListeners={[\n              {\n                eventName: 'complete',\n                callback: () => handleAnimation(),\n              },\n            ]}\n            options={defaultOptions}\n            style={{ backgroundColor: 'transparent' }}\n            height={400}\n            width={400}\n          />\n        </div>\n        <div style={{ display: 'flex', flex: 1, marginTop: 24, marginBottom: 24 }}>\n          <Title style={homeTitle}>\n            Hi! I'm John Clifford de Vera\n          </Title>\n        </div>\n        <div className=\"footer-wrapper\">\n          <Footer />\n        </div>\n      </div>\n    </Content>\n  );\n}\n\nexport { Home };\n","const colors = {\n  primary: '#77dd77',\n  secondary: '#F8F8FF',\n  tertiary: '#e1b382',\n};\n\nexport { colors };\n","import React, { useState } from 'react';\nimport { Menu, Layout } from 'antd';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n} from 'react-router-dom';\nimport { Home } from './pages/Home/Home';\n\nconst { Content, Header } = Layout;\n\nconst navStyle = {\n  menu: {\n    display: 'flex',\n    // justifyContent: 'center',\n    backgroundColor: 'transparent',\n    paddingBottomWidth: 0,\n    borderBottomWidth: 'none !important',\n  },\n};\n\nfunction App() {\n  const [current, setCurrent] = useState('home');\n\n  const handleClick = (e: any) => setCurrent(e.key);\n\n  return (\n    <Router>\n      {/* <Layout style={{ backgroundColor: '#FFFAFA' }}> */}\n      <Header className=\"siteLayoutBackground\" style={{ padding: 0, backgroundColor: 'transparent' }}>\n        <Menu style={navStyle.menu} onClick={handleClick} selectedKeys={[current]} mode=\"horizontal\">\n          <Menu.Item key=\"home\">\n            <Link to=\"/portfolio\">Intro</Link>\n          </Menu.Item>\n          <Menu.Item key=\"works\">\n            <Link to=\"/portfolio/works\">Works</Link>\n          </Menu.Item>\n          <Menu.Item key=\"about\">\n            <Link to=\"/portfolio/about\">About</Link>\n          </Menu.Item>\n          <Menu.Item key=\"contact\">\n            <Link to=\"/portfolio/contact\">Contact</Link>\n          </Menu.Item>\n        </Menu>\n      </Header>\n      <Content>\n        <Switch>\n          <Route path=\"/portfolio\">\n            <Home />\n          </Route>\n        </Switch>\n      </Content>\n      {/* </Layout> */}\n    </Router>\n  );\n}\n\nexport { App };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}